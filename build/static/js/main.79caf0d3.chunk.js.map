{"version":3,"sources":["logo.svg","MyComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","rtc","client","joined","published","localStream","remoteStream","params","option","MyComponent","props","state","date","Date","AgoraRTC","createClient","mode","codec","init","console","log","err","error","setClientRole","join","uid","createStream","streamID","audio","video","screen","play","id","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,0JCGrCC,EAAM,CACRC,OAAQ,KACRC,QAAQ,EACRC,WAAW,EACXC,YAAa,KACbC,aAAc,GACdC,OAAQ,IAGNC,EACK,mCADLA,EAEO,aAFPA,EAGG,KAHHA,EAIK,sHAGUC,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,KAAM,IAAIC,MAFT,E,gEAKE,IAAD,OAGhBZ,EAAIC,OAASY,IAASC,aAAa,CAACC,KAAM,OAAQC,MAAO,SACzDhB,EAAIC,OAAOgB,KAAKV,GAAc,WAC1BW,QAAQC,IAAI,gBACZD,QAAQC,IAAI,gBAAkB,EAAKT,MAAMC,SAC1C,SAACS,GACAF,QAAQG,MAAM,aAAcD,MAGhCpB,EAAIC,OAAOqB,cAAc,QAEzBtB,EAAIC,OAAOsB,KAAKhB,GAA8B,KAAMA,EAAgBA,GAAcA,EAAa,MAAM,SAACiB,GAClGN,QAAQC,IAAI,iBAAmBZ,EAAiB,kBAAoBiB,GACpExB,EAAIM,OAAOkB,IAAMA,EAGjBxB,EAAII,YAAcS,IAASY,aAAa,CACpCC,SAAU1B,EAAIM,OAAOkB,IACrBG,OAAO,EACPC,OAAO,EACPC,QAAQ,IAIZ7B,EAAII,YAAYa,MAAK,WACjBC,QAAQC,IAAI,6BAEZnB,EAAII,YAAY0B,KAAK,mBACtB,SAAUV,GACTF,QAAQG,MAAM,4BAA6BD,SAEhD,SAACA,GACAF,QAAQG,MAAM,qBAAsBD,Q,+BAKxC,OAAO,yBAAKW,GAAG,gBACX,yC,GA/C6BC,IAAMC,WCHhCC,MAXf,WACI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cAEd,kBAAC,EAAD,SCEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLH,QAAQG,MAAMA,EAAMgC,c","file":"static/js/main.79caf0d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react' ;\r\nimport AgoraRTC from 'agora-rtc-sdk';\r\n\r\nconst rtc = {\r\n    client: null,\r\n    joined: false,\r\n    published: false,\r\n    localStream: null,\r\n    remoteStream: [],\r\n    params: {}\r\n};\r\n\r\nconst option = {\r\n    appID: \"d7bef4a65cf24ff382e16409ae72fbe3\",\r\n    channel: \"react-demo\",\r\n    uid: null,\r\n    token: \"006d7bef4a65cf24ff382e16409ae72fbe3IACwVpWN2oTrU2pevL4b8gdbor0zvazGKUXdVAAM1aDqqrurOf8AAAAAEACtIROL9nTpXgEAAQD0dOle\"\r\n};\r\n\r\nexport default class MyComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {date: new Date()}\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        let self = this;\r\n        rtc.client = AgoraRTC.createClient({mode: 'live', codec: 'h264'});\r\n        rtc.client.init(option.appID, () => {\r\n            console.log('init success');\r\n            console.log(' the date is ' + this.state.date);\r\n        }, (err) => {\r\n            console.error(\"init error\", err);\r\n        });\r\n\r\n        rtc.client.setClientRole('host');\r\n        // Join a channel\r\n        rtc.client.join(option.token ? option.token : null, option.channel, option.uid ? +option.uid : null, (uid) => {\r\n            console.log(\"join channel: \" + option.channel + \" success, uid: \" + uid);\r\n            rtc.params.uid = uid;\r\n\r\n            // Create a local stream\r\n            rtc.localStream = AgoraRTC.createStream({\r\n                streamID: rtc.params.uid,\r\n                audio: true,\r\n                video: true,\r\n                screen: false,\r\n            });\r\n\r\n            // Initialize the local stream\r\n            rtc.localStream.init(function () {\r\n                console.log(\"init local stream success\");\r\n                // play stream with html element id \"local_stream\"\r\n                rtc.localStream.play(\"local_stream\");\r\n            }, function (err) {\r\n                console.error(\"init local stream failed \", err);\r\n            });\r\n        }, (err) => {\r\n            console.error(\"client join failed\", err)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div id=\"local_stream\">\r\n            <span>OK</span>\r\n        </div>\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyComponent from './MyComponent'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {/*<img src={logo} className=\"App-logo\" alt=\"logo\"/>*/}\n                <MyComponent/>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}